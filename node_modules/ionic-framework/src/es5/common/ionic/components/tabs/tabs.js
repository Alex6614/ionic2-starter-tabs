"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _angular2Angular2 = require('angular2/angular2');

var _ion = require('../ion');

var _appApp = require('../app/app');

var _navNavController = require('../nav/nav-controller');

var _navViewController = require('../nav/view-controller');

var _configDecorators = require('../../config/decorators');

var _configConfig = require('../../config/config');

/**
 * @name ionTabs
 * @description
 * Powers a multi-tabbed interface with a Tab Bar and a set of "pages"
 * that can be tabbed through.
 *
 * Assign any tabs attribute to the element to define its look and feel.
 *
 * For iOS, tabs will appear at the bottom of the screen. For Android, tabs
 * will be at the top of the screen, below the nav-bar. This follows each platform's
 * design specification, but can be configured with IonicConfig.
 *
 * See the ionTab component's documentation for more details on individual tabs.
 *
 * @usage
 * ```html
 * <ion-tabs>
 *   <ion-tab tab-title="Heart" tab-icon="heart-" [root]="root1"></ion-tab>
 *   <ion-tab tab-title="Star" tab-icon="star" [root]="root2"></ion-tab>
 *   <ion-tab tab-title="Stopwatch" tab-icon="stopwatch" [root]="root3"></ion-tab>
 * </ion-tabs>
 * ```
 *
 */
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2:
            return decorators.reduceRight(function (o, d) {
                return d && d(o) || o;
            }, target);
        case 3:
            return decorators.reduceRight(function (o, d) {
                return (d && d(target, key), void 0);
            }, void 0);
        case 4:
            return decorators.reduceRight(function (o, d) {
                return d && d(target, key, o) || o;
            }, desc);
    }
};
var __metadata = undefined && undefined.__metadata || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = undefined && undefined.__param || function (paramIndex, decorator) {
    return function (target, key) {
        decorator(target, key, paramIndex);
    };
};
var Tabs = (function (_NavController) {
    _inherits(Tabs, _NavController);

    /**
     * TODO
     */

    function Tabs(hostNavCtrl, viewCtrl, app, injector, elementRef, zone) {
        var _this = this;

        _classCallCheck(this, Tabs);

        _get(Object.getPrototypeOf(Tabs.prototype), "constructor", this).call(this, hostNavCtrl, injector, elementRef, zone);
        this.app = app;
        // Tabs may also be an actual ViewController which was navigated to
        // if Tabs is static and not navigated to within a NavController
        // then skip this and don't treat it as it's own ViewController
        if (viewCtrl) {
            this.viewCtrl = viewCtrl;
            // special overrides for the Tabs ViewController
            // the Tabs ViewController does not have it's own navbar
            // so find the navbar it should use within it's active Tab
            viewCtrl.navbarView = function () {
                var activeTab = _this.getActive();
                if (activeTab && activeTab.instance) {
                    return activeTab.instance.navbarView();
                }
            };
            // a Tabs ViewController should not have a back button
            // enableBack back button will later be determined
            // by the active ViewController that has a navbar
            viewCtrl.enableBack = function () {
                return false;
            };
        }
    }

    /**
     * TODO
     * @param {Tab} tab  TODO
     */

    _createClass(Tabs, [{
        key: "addTab",
        value: function addTab(tab) {
            // tab.viewCtrl refers to the ViewController of the individual Tab being added to Tabs (NavController)
            // this.viewCtrl refers to the ViewController instsance on Tabs
            this.add(tab.viewCtrl);
            if (this.length() === 1) {
                // this was the first tab added, queue this one to be loaded and selected
                var promise = tab.queueInitial();
                this.viewCtrl && this.viewCtrl.addPromise(promise);
            }
        }

        /**
         * TODO
         * @param {Tab} tab  TODO
         * @returns {TODO} TODO
         */
    }, {
        key: "select",
        value: function select(tab) {
            var _this2 = this;

            var enteringView = null;
            if (typeof tab === 'number') {
                enteringView = this.getByIndex(tab);
            } else {
                enteringView = this.getByInstance(tab);
            }
            if (!enteringView || !enteringView.instance || !this.app.isEnabled()) {
                return Promise.reject();
            }
            return new Promise(function (resolve) {
                enteringView.instance.load(function () {
                    var opts = {
                        animate: false
                    };
                    var leavingView = _this2.getActive() || new _navViewController.ViewController();
                    leavingView.shouldDestroy = false;
                    leavingView.shouldCache = true;
                    _this2.transition(enteringView, leavingView, opts, function () {
                        _this2.highlight && _this2.highlight.select(tab);
                        resolve();
                    });
                });
            });
        }
    }, {
        key: "tabs",
        get: function get() {
            return this.instances();
        }
    }]);

    return Tabs;
})(_navNavController.NavController);
exports.Tabs = Tabs;
exports.Tabs = Tabs = __decorate([(0, _configDecorators.IonicComponent)({
    selector: 'ion-tabs',
    defaultProperties: {
        'tabBarPlacement': 'bottom',
        'tabBarIcons': 'top'
    }
}), (0, _configDecorators.IonicView)({
    template: '' + '<nav class="tab-bar-container">' + '<tab-bar role="tablist">' + '<a *ng-for="#t of tabs" [tab]="t" class="tab-button" role="tab">' + '<icon [name]="t.tabIcon" [is-active]="t.isSelected" class="tab-button-icon"></icon>' + '<span class="tab-button-text">{{t.tabTitle}}</span>' + '</a>' + '<tab-highlight></tab-highlight>' + '</tab-bar>' + '</nav>' + '<section class="content-container">' + '<ng-content></ng-content>' + '</section>',
    directives: [(0, _angular2Angular2.forwardRef)(function () {
        return TabButton;
    }), (0, _angular2Angular2.forwardRef)(function () {
        return TabHighlight;
    })]
}), __param(0, (0, _angular2Angular2.Optional)()), __param(1, (0, _angular2Angular2.Optional)()), __metadata('design:paramtypes', [typeof _navNavController.NavController !== 'undefined' && _navNavController.NavController || Object, typeof _navViewController.ViewController !== 'undefined' && _navViewController.ViewController || Object, typeof _appApp.IonicApp !== 'undefined' && _appApp.IonicApp || Object, typeof _angular2Angular2.Injector !== 'undefined' && _angular2Angular2.Injector || Object, typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef || Object, typeof _angular2Angular2.NgZone !== 'undefined' && _angular2Angular2.NgZone || Object])], Tabs);
/**
 * TODO
 */
var TabButton = (function (_Ion) {
    _inherits(TabButton, _Ion);

    function TabButton(tabs, config, elementRef) {
        _classCallCheck(this, TabButton);

        _get(Object.getPrototypeOf(TabButton.prototype), "constructor", this).call(this, elementRef, config);
        this.tabs = tabs;
        if (config.setting('hoverCSS') === false) {
            elementRef.nativeElement.classList.add('disable-hover');
        }
    }

    _createClass(TabButton, [{
        key: "onInit",
        value: function onInit() {
            this.tab.btn = this;
            var id = this.tab.viewCtrl.id;
            this.btnId = 'tab-button-' + id;
            this.panelId = 'tab-panel-' + id;
            this.hasTitle = !!this.tab.tabTitle;
            this.hasIcon = !!this.tab.tabIcon;
            this.hasTitleOnly = this.hasTitle && !this.hasIcon;
            this.hasIconOnly = this.hasIcon && !this.hasTitle;
        }
    }, {
        key: "onClick",
        value: function onClick(ev) {
            ev.stopPropagation();
            ev.preventDefault();
            this.tabs.select(this.tab);
        }
    }]);

    return TabButton;
})(_ion.Ion);
TabButton = __decorate([(0, _angular2Angular2.Directive)({
    selector: '.tab-button',
    properties: ['tab'],
    host: {
        '[attr.id]': 'btnId',
        '[attr.aria-controls]': 'panelId',
        '[attr.aria-selected]': 'tab.isSelected',
        '[class.has-title]': 'hasTitle',
        '[class.has-icon]': 'hasIcon',
        '[class.has-title-only]': 'hasTitleOnly',
        '[class.icon-only]': 'hasIconOnly',
        '(click)': 'onClick($event)'
    }
}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [Tabs, typeof _configConfig.IonicConfig !== 'undefined' && _configConfig.IonicConfig || Object, typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef || Object])], TabButton);
var TabHighlight = (function () {
    function TabHighlight(tabs, config, elementRef) {
        _classCallCheck(this, TabHighlight);

        if (config.setting('mode') === 'md') {
            tabs.highlight = this;
            this.elementRef = elementRef;
        }
    }

    _createClass(TabHighlight, [{
        key: "select",
        value: function select(tab) {
            var _this3 = this;

            setTimeout(function () {
                var d = tab.btn.getDimensions();
                var ele = _this3.elementRef.nativeElement;
                ele.style.transform = 'translate3d(' + d.left + 'px,0,0) scaleX(' + d.width + ')';
                if (!_this3.init) {
                    _this3.init = true;
                    setTimeout(function () {
                        ele.classList.add('animate');
                    }, 64);
                }
            }, 32);
        }
    }]);

    return TabHighlight;
})();
TabHighlight = __decorate([(0, _angular2Angular2.Directive)({
    selector: 'tab-highlight'
}), __param(0, (0, _angular2Angular2.Host)()), __metadata('design:paramtypes', [Tabs, typeof _configConfig.IonicConfig !== 'undefined' && _configConfig.IonicConfig || Object, typeof _angular2Angular2.ElementRef !== 'undefined' && _angular2Angular2.ElementRef || Object])], TabHighlight);